# -*- coding: utf-8 -*-
"""Employee_salary_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sCr2-lV5KXSG7vLb0TKIQyY29cl3w1f6
"""

import pandas as pd
import numpy as np

data=pd.read_csv('adult 3.csv')

data.shape

data.head(10)

data.tail(10)

data.isna()

data.isna().sum()

data.occupation.value_counts()

data.gender.value_counts()

data.education.value_counts()

data['workclass'].value_counts()

data.occupation.replace({'?':'others'},inplace=True)

data.occupation.replace({'?':'NotListed'},inplace=True)
data['workclass'].replace('?', 'Notlisted', inplace=True)

data = data[~data['workclass'].isin(['Without-pay', 'Never-worked'])]

data.shape

data.drop(columns=['education'],inplace=True)

data

import matplotlib.pyplot as plt
plt.boxplot(data['age'])
plt.show()

data=data[(data['age']<=75)& (data['age']>=17)]

from sklearn.model_selection import train_test_split

x=data.drop(columns=['income'])
y=data['income']
x

plt.boxplot(data['age'])
plt.show()

data

import seaborn as sns
sns.histplot(data['income'],kde=True)

from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
data['workclass']=encoder.fit_transform(data['workclass'])
data['marital-status']=encoder.fit_transform(data['marital-status'])
data['occupation']=encoder.fit_transform(data['occupation'])
data['relationship']=encoder.fit_transform(data['relationship'])
data['race']=encoder.fit_transform(data['race'])
data['gender']=encoder.fit_transform(data['gender'])
data['native-country']=encoder.fit_transform(data['native-country'])
data

from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
data['workclass']=encoder.fit_transform(data['workclass'])
data['marital-status']=encoder.fit_transform(data['marital-status'])
data['occupation']=encoder.fit_transform(data['occupation'])
data['relationship']=encoder.fit_transform(data['relationship'])
data['race']=encoder.fit_transform(data['race'])
data['gender']=encoder.fit_transform(data['gender'])
data['native-country']=encoder.fit_transform(data['native-country'])

data

x=data.drop(columns=['income'])
y=data['income']

y

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
x=scaler.fit_transform(x)

x

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from sklearn.neighbors import KNeighborsClassifier
model=KNeighborsClassifier()
model.fit(x_train,y_train)
predict=model.predict(x_test)
predict

from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
model.fit(x_train,y_train)
predict=model.predict(x_test)
predict
from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

from sklearn.neural_network import MLPClassifier
model=MLPClassifier(solver='adam',hidden_layer_sizes=(5,2))
model.fit(x_train,y_train)
predict=model.predict(x_test)
predict
from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

from sklearn.ensemble import RandomForestClassifier
model1=RandomForestClassifier()
model1.fit(x_train,y_train)
predict=model1.predict(x_test)
predict
from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

from sklearn.tree import DecisionTreeClassifier
model=DecisionTreeClassifier()
model.fit(x_train,y_train)
predict=model.predict(x_test)
predict
from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

from sklearn.svm import SVC
model=SVC()
model.fit(x_train,y_train)
predict=model.predict(x_test)
predict
from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

import joblib
joblib.dump(model1, 'model1_random_forest.pkl')

