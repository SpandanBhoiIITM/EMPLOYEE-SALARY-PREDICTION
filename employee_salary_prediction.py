# -*- coding: utf-8 -*-
"""Employee_salary_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sCr2-lV5KXSG7vLb0TKIQyY29cl3w1f6
"""

import pandas as pd
import numpy as np

data=pd.read_csv('adult 3.csv')

data.shape

data.head(10)

data.tail(10)

data.isna()

data.isna().sum()

data.occupation.value_counts()

data.gender.value_counts()

data.education.value_counts()

data['workclass'].value_counts()

data.occupation.replace({'?':'others'},inplace=True)

data.occupation.replace({'?':'NotListed'},inplace=True)
data['workclass'].replace('?', 'Notlisted', inplace=True)

data = data[~data['workclass'].isin(['Without-pay', 'Never-worked'])]

data.shape

data.drop(columns=['education'],inplace=True)

data

import matplotlib.pyplot as plt
plt.boxplot(data['age'])
plt.show()

data=data[(data['age']<=75)& (data['age']>=17)]

from sklearn.model_selection import train_test_split

x=data.drop(columns=['income'])
y=data['income']
x

plt.boxplot(data['age'])
plt.show()

data

import seaborn as sns
sns.histplot(data['income'],kde=True)

from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
data['workclass']=encoder.fit_transform(data['workclass'])
data['marital-status']=encoder.fit_transform(data['marital-status'])
data['occupation']=encoder.fit_transform(data['occupation'])
data['relationship']=encoder.fit_transform(data['relationship'])
data['race']=encoder.fit_transform(data['race'])
data['gender']=encoder.fit_transform(data['gender'])
data['native-country']=encoder.fit_transform(data['native-country'])
data

from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
data['workclass']=encoder.fit_transform(data['workclass'])
data['marital-status']=encoder.fit_transform(data['marital-status'])
data['occupation']=encoder.fit_transform(data['occupation'])
data['relationship']=encoder.fit_transform(data['relationship'])
data['race']=encoder.fit_transform(data['race'])
data['gender']=encoder.fit_transform(data['gender'])
data['native-country']=encoder.fit_transform(data['native-country'])

data

x=data.drop(columns=['income'])
y=data['income']

y

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
x=scaler.fit_transform(x)

x

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from sklearn.neighbors import KNeighborsClassifier
model=KNeighborsClassifier()
model.fit(x_train,y_train)
predict=model.predict(x_test)
predict

from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
model.fit(x_train,y_train)
predict=model.predict(x_test)
predict
from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

from sklearn.neural_network import MLPClassifier
model=MLPClassifier(solver='adam',hidden_layer_sizes=(5,2))
model.fit(x_train,y_train)
predict=model.predict(x_test)
predict
from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

from sklearn.ensemble import RandomForestClassifier
model1=RandomForestClassifier()
model1.fit(x_train,y_train)
predict=model1.predict(x_test)
predict
from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

from sklearn.tree import DecisionTreeClassifier
model=DecisionTreeClassifier()
model.fit(x_train,y_train)
predict=model.predict(x_test)
predict
from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

from sklearn.svm import SVC
model=SVC()
model.fit(x_train,y_train)
predict=model.predict(x_test)
predict
from sklearn.metrics import accuracy_score
accuracy_score(y_test,predict)

import joblib
joblib.dump(model1, 'model1_random_forest.pkl')

!pip install streamlit pyngrok --quiet
import joblib
import streamlit as st

model = joblib.load("model1_random_forest.pkl")

st.title("ðŸ’¼ Employee Income Classifier")
st.markdown("Predict whether income is `<=50K` or `>50K` based on employee attributes.")

# Input fields
age = st.number_input("Age", min_value=17, max_value=90, value=30)
workclass = st.selectbox("Workclass", [1, 2, 3, 4, 5, 6, 7, 8])  # integer-encoded
fnlwgt = st.number_input("FNLWGT", min_value=10000, max_value=1000000, value=300000)
edu_num = st.slider("Education Number", 1, 16, 10)
marital_status = st.selectbox("Marital Status", [0, 1, 2, 3, 4, 5, 6])  # encoded
occupation = st.selectbox("Occupation", list(range(0, 15)))
relationship = st.selectbox("Relationship", list(range(0, 6)))
race = st.selectbox("Race", list(range(0, 5)))
gender = st.radio("Gender", ["Male", "Female"])
gender_val = 1 if gender == "Male" else 0
capital_gain = st.number_input("Capital Gain", 0, 100000, 0)
capital_loss = st.number_input("Capital Loss", 0, 5000, 0)
hours = st.slider("Hours Per Week", 1, 100, 40)
country = st.selectbox("Native Country", list(range(0, 42)))  # encoded

# Predict
if st.button("Predict Income"):
    input_vector = np.array([age, workclass, fnlwgt, edu_num, marital_status,
                             occupation, relationship, race, gender_val,
                             capital_gain, capital_loss, hours, country]).reshape(1, -1)

    prediction = model.predict(input_vector)[0]
    label = ">50K" if prediction == 1 else "<=50K"
    st.success(f"ðŸ”® Predicted Income: {label}")